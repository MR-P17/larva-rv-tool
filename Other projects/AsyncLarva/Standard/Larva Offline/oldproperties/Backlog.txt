IMPORTS
{
import com.ccbill.tgs.transactions.structure.Transaction;
import com.ccbill.tgs.tsm.TSMRunnableObject;
import com.ccbill.tgs.tsm.states.Tier1.TGSBaseState;
import com.ccbill.tgs.tsm.TSM;


import com.ccbill.tgs.tsm.states.BacklogInserter;
import com.ccbill.tgs.transactions.enumerations.ChainID;

}

%%the global level, a sort of "static"...all the properties will be visible in the sub-levels

GLOBAL {

FOREACH (Transaction t equateUsing equateT stringUsing toStringT){

EVENTS {

afterproc(TSMRunnableObject tsm)        = {{tsm.processTransaction() uponReturning()}|{tsm.processTransaction() uponThrowing()}}
	where
		{t=tsm.getTransaction();}

proc(TSMRunnableObject tsm)        = {tsm.processTransaction()}
	where
		{t=tsm.getTransaction();}

setchain(Transaction t1, ChainID cid)           = {t1.setCurrentChainID(cid)}
	where 
		{t=t1;}


procState(TSMRunnableObject tsm)   = {TGSBaseState.process(tsm)}
	where 
		{t=tsm.getTransaction();}

backlog(tsm)         = {BacklogInserter *.backlogProcessor(tsm)}where t=tsm.getTransaction();


all() = {proc | setchain | procState | backlog}


}%%EVENTS


%% these are variables which are particular to a Transaction

VARIABLES {

int max;

int retries = 0;

}


PROPERTY backlog{

STATES{

ACCEPTING{complete}

BAD {bad_state}

NORMAL {
done
process_trans     
set_chain          
backlog           
a_retry
}

STARTING {start}

}%%STATES


TRANSITIONS{

start                 -> process_trans      [proc(tsm)]

process_trans         -> backlog			[backlog\\max = t.getBacklogRetries(); System.out.println("Backlog: "+max);]

backlog               -> set_chain			[setchain\\System.out.println("The chain is being set to : " + cid);]

backlog               -> bad_state			[all]

set_chain		      -> a_retry		    [procState\t.getCurrentChainID().equals(ChainID.BACKLOGCHAIN) && (max-(++retries)==t.getBacklogRetries())\System.out.println("Retry " + retries + " is taking place!! Backlog: "+t.getBacklogRetries());]

set_chain			  -> bad_state		    [procState\t.getCurrentChainID().equals(ChainID.BACKLOGCHAIN)\System.out.println("Mismatch found...Expected: "+ (max-retries) + " but found: "+t.getBacklogRetries());]

a_retry		          -> a_retry		    [procState\t.getCurrentChainID().equals(ChainID.BACKLOGCHAIN) && (max-(++retries)==t.getBacklogRetries())\System.out.println("Retry " + retries + " is taking place!! Backlog: "+t.getBacklogRetries());]

a_retry		          -> done		    	[setchain\cid==ChainID.DONECHAIN\System.out.println("Done chain override");]

a_retry		          -> bad_state		    [procState\t.getCurrentChainID().equals(ChainID.BACKLOGCHAIN)\System.out.println("Mismatch found...Expected: "+ (max-retries) + " but found: "+t.getBacklogRetries());]

done		          -> a_retry		    [procState\t.getCurrentChainID().equals(ChainID.BACKLOGCHAIN)\retries++; System.out.println("Retry " + retries + " is taking place!! Backlog: "+t.getBacklogRetries());]

done                  -> complete			[afterproc\t.getResponse().getApproved().equals("Y")\System.out.println("Transaction completed upon " + retries + " retries!!");]

a_retry               -> complete			[afterproc\t.getResponse().getApproved().equals("Y")\System.out.println("Transaction completed upon " + retries + " retries!!");]



}%%TRANSITIONS
}%%PROPERTY
}%%FOREACH t
}%%GLOBAL

METHODS{

static boolean equateT(Transaction t, Transaction t2)
{
 if (t.getGeneratedTransactionId() == 0)
 	return t.equals(t2);
 else {
 	if (t.getGeneratedTransactionId()
 		== t2.getGeneratedTransactionId())
 		return true;
 	else
 		return false;
	}
}

static String toStringT(Transaction t)
{
return new Long(t.getGeneratedTransactionId()).toString();
}
}
