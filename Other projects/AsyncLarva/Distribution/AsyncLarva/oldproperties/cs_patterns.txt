IMPORTS {
import sniffer.*;
import larva.*;
import java.net.*;
import java.util.HashMap;
}

GLOBAL {

VARIABLES {
int pending = 0;
int open = 0;
int ips = 0;
Channel checkchannel;
Channel attackchannel;

Clock clock;
}

EVENTS
{
newRequest() = {checkchannel.receive()} 
clockAT5() = {clock@4}
attackEvent() = {attackchannel.receive()}

}

PROPERTY check {
STATES {
BAD { }
NORMAL { needcheck }
STARTING { start }
}
TRANSITIONS {
start -> needcheck [newRequest\pending > open+10\clock.reset();System.out.println("pending: " + pending + " open: " + open);]
start -> start [newRequest\\System.out.println("pending: " + pending + " open: " + open);]
needcheck -> start [clockAT5\pending > open+10\System.out.println("pending: " + pending + " open: " + open);System.out.println("Possible Attack!");attackchannel.send(); ]
needcheck -> start [clockAT5]

}
}



FOREACH (InetAddress ip)
{

VARIABLES {
int openConns = 0;
int pendingConns = 0;
Channel ipchannel;
Channel resetAll;
}

EVENTS{

ipEvent() = {ipchannel.receive(Object ip1)} where {ip = (InetAddress)ip1; }
resetEvent() = {resetAll.receive(Object ip1)} where {ip = (InetAddress)ip1; }

}

PROPERTY ipss {
STATES {
ACCEPTING { ready {ips--;_killThis();} }
NORMAL { normal {System.out.println("ips: " + ips + " pendingConns: " + pendingConns);}}
STARTING { start }
}
TRANSITIONS {
start -> normal [ipEvent\\ips++;]
normal -> ready [attackEvent\pendingConns >= (pending/(double)ips)\pending-=pendingConns;open-=openConns; System.out.println("Problematic IP:" + ip + " pendingConns: " + pendingConns);Main.blocker.blockIP(ip);resetAll.send(ip);]
normal -> ready [ipEvent\(openConns + pendingConns)== 0]
}
}


FOREACH (Integer port, Integer port2){

VARIABLES {
Clock c;
}

EVENTS {
receiveSYN() = {*.receiveSYN(InetAddress src, InetAddress dst, int src_port, int dst_port)}
										where { ip = src; port = src_port; port2 = dst_port;}
sendSYNACK() = {*.sendSYNACK(InetAddress src, InetAddress dst, int src_port, int dst_port)}
										 where { ip = dst; port = dst_port; port2 = src_port;}
receiveACK() = {*.receiveACK(InetAddress src, InetAddress dst, int src_port, int dst_port)}
										 where { ip = src; port = src_port; port2 = dst_port;}
receiveFIN() = {*.receiveFIN(InetAddress src, InetAddress dst, int src_port, int dst_port)}
										 where { ip = src; port = src_port; port2 = dst_port;}
sendFIN() = {*.receiveFIN(InetAddress src, InetAddress dst, int src_port, int dst_port)}
										 where { ip = dst; port = dst_port; port2 = src_port;}										 
cAT0_1() = {c@5}

cAT0_150() = {c@150}  

fin() = { receiveFIN | sendFIN }



%%all() = {failed|success|c3AT0_01|c2AT0_01}
}

PROPERTY connections {
STATES {
ACCEPTING { 
failed {_killThis();} 
ended  {_killThis();} 
}
BAD { }
NORMAL {
pending
answered
connected
}
STARTING { start }
}
TRANSITIONS {
start -> pending [receiveSYN\\pending++;pendingConns++;checkchannel.send();ipchannel.send(ip);c.reset();]
pending -> failed [cAT0_1\\pending--;pendingConns--;Main.blocker.reset(ip,port,port2);]
pending -> failed [resetEvent\\pending--;pendingConns--;Main.blocker.reset(ip,port,port2);]
pending -> answered [sendSYNACK\\c.reset();] 
answered -> connected [receiveACK\\open++;pending--;openConns++;pendingConns--;]
answered -> failed [cAT0_1\\open--;openConns--;Main.blocker.reset(ip,port,port2);]
answered -> failed [resetEvent\\open--;openConns--;Main.blocker.reset(ip,port,port2);]
connected -> ended [fin\\open--;openConns--;]
connected -> ended [cAT0_150\\System.out.println("connection considered closed automatically");open--;openConns--;]
}
}
}
}
}%%GLOBAL